;gnu clisp  2.49.60

(defun Myremove (el L)
  (cond ((null L) L)
        ((eq el (car L)) (Myremove el (cdr L)))
        (T (cons (car L) (Myremove el (cdr L))))))

(defun Mymember (el L)
  (cond ((null L) NIL)
        ((equal el (car L)) T)
        ((consp (car L)) (or (Mymember el (car L))
                             (Mymember el (cdr L))))
            (T (Mymember el (cdr L)))))

(defun simplifyPlus(L)
    (cond  ((null L) NIL)
           (T (Myremove '0 (cons (simplify (car L)) 
                                 (simplifyPlus (cdr L)))))
           )
)

(defun simplifyMin(L)
    (cond  ((null L) NIL)
           (T (Myremove '0 (cons (simplify (car L)) 
                                 (simplifyMin (cdr L)))))
           )
)

(defun simplifyMult(L)
    (cond  ((null L) NIL)
           ((Mymember '0 (cons (simplify (car L)) (simplifyMult (cdr L))))   (list '0))
           (T (cons (simplify (car L)) (simplifyMult (cdr L))))
           )
)

(defun simplifyDiv (L)
    (cond  ((null L) NIL)
           ((eq (simplify (car L)) '0) (list '0))
           ((eq (simplify (cadr L)) '0) (error 'ERROR))
           (T (cons (simplify (car L)) (simplifyDiv (cdr L))))
           ) 
)

(defun simplifyOr(L)
    (cond  ((null L) NIL)
           (T (Myremove '0 (cons (simplify (car L)) 
                                 (simplifyOr (cdr L)))))
           )
)

(defun simplifyAnd(L)
    (cond  ((null L) NIL)
           ((Mymember '0 (cons (simplify (car L)) (simplifyAnd (cdr L))))   (list '0))
           (T (cons (simplify (car L)) (simplifyAnd (cdr L))))
           )
)

(defun simplify (L)
  (cond  ((null L) NIL)
         ((atom L) L)
         ((eq (car L) '+) (cond  ((null (cadr (simplifyPlus (cdr L)))) (car (simplifyPlus (cdr L))))
                                 (T (cons '+ (simplifyPlus (cdr L))) )
                                 ))
         ((eq (car L) '*) (cond  ((null (cadr (simplifyMult (cdr L)))) (car (simplifyMult (cdr L))))
                                 (T (cons '* (simplifyMult (cdr L))) )
                                  ))
         ((eq (car L) '-) (cond  ((null (cdr (simplifyMin (cdr L)))) (car (simplifyMin (cdr L))))
                                 (T (cons '- (simplifyMin (cdr L))))
                                 ))
         ((eq (car L) '/) (cond  ((null (cadr (simplifyDiv (cdr L)))) (car (simplifyDiv (cdr L))))
                                 (T (cons '/ (simplifyDiv (cdr L))) )
                                 ))
         ((eq (car L) 'or_) (cond  ((null (cadr (simplifyOr (cdr L)))) (car (simplifyOr (cdr L))))
                                 (T (cons 'or_ (simplifyOr (cdr L))) )
                                 ))
         ((eq (car L) 'and_) (cond  ((null (cadr (simplifyAnd (cdr L)))) (car (simplifyAnd (cdr L))))
                                 (T (cons 'and_ (simplifyAnd (cdr L))) )
                                  ))
   )
)

(print (simplify '(or_ a 1)))
(print (simplify '(and_ a 1 b)))
;(print  (simplify '(+ a b (* b (+ c 0) b) (*(+ b f ) 0) ) ))

; ошибки
;(print (simplify '(+ a b (* b 1))))
;(print (simplify '(+ a 1 (- a 1))))
;(print (simplify '(- (* a 2) (* a 2))))
